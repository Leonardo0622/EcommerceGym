# Dockerfile para producci칩n del backend
FROM node:18-alpine AS base

# Instalar dependencias del sistema
RUN apk add --no-cache dumb-init

# Instalar dependencias solo cuando sea necesario
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copiar archivos de dependencias
COPY package.json package-lock.json* ./
RUN npm ci --only=production

# Build de la aplicaci칩n
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Crear directorio de uploads
RUN mkdir -p uploads

# Imagen de producci칩n
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nodejs

# Copiar archivos necesarios
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/src ./src
COPY --from=builder --chown=nodejs:nodejs /app/uploads ./uploads
COPY --from=builder --chown=nodejs:nodejs /app/package.json ./package.json

USER nodejs

EXPOSE 5000

# Usar dumb-init para manejar se침ales correctamente
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "src/server.js"] 